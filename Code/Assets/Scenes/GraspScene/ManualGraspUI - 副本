using System.Collections;
using System.Collections.Generic;
using System;
using UnityEngine;
using UnityEngine.UI;
using System.Threading;
using System.Reflection;

public class ManualGraspUI : MonoBehaviour
{
    public ModelLoader SubjectModelImporter;

    public GraspPlanner Planner { get
        {
            return SubjectModelImporter.GetPlanner();
        } 
    }

    public DOF HandModelDoF;

    public Text Quality;

    public Text ToggleQualityAutoCalculationBtnText;

    public Slider[] DoFSliders;
    public Slider[] WristTransformSliders;

    // dof tilting
    private bool _is_tiltingDoF;
    private int _tiltingDoFIndex;
    private float _DoFTiltingValue;

    // wrist tilting
    private bool _is_tiltingWrist;
    private int _tiltingWristIndex;
    private float _wristTiltingValue;

    private float TotalTime;

    public StabilityWithDirectionsOfInterestUI QualityMeasureUI;

    public PlannerSettingsUI PlannerSettings;

    public GameObject HandModel;

    // references of this UI group
    public Button ToggleBtn;
    public Toggle SingleStepToggle;
    public Toggle ContactPointVisualizeToggle;
    public Toggle ImaginaryContactPointVisualizeToggle;


    public Toggle ShowHand;

    public Button MakeContact;

    // score panel
    public Text QualityValue;
    public Text NextQualityValue;
    public Text TemperatureValue;
    public Text ContactPointsValue;
    public Text IterationsValue;



    // memory
    private double? _lastQualityValue;

    private void Start()
    {
        //InitMove();
    }
    private void OnEnable()
    {
        Planner.Is_AccumulatingContacts = true;
    }

    public void Awake()
    {
        AttachDoFSlidersToTilts();
        AttachWristTransformSlidersToTilts();
    }

    private void Update()
    {
        Quality.text = _planner.ScoreBuffer.ToString();
        HandleMouseInput();

        TotalTime += Time.deltaTime;
        if (TotalTime >= 2)//控制动作执行速度
        {
            IsAutoMove();
            TotalTime = 0;
        }
        AutoMove();  
    }

    public void OnUpdateQualityBtnPress()
    {
        //Planner.Is_updatingScoreOnCollisionStay = true;
        Planner.CalculateQualityMeasure(true);
        //planner.Is_calculatingQualty = false;
    }
        

    public void SetHandleCollisionEnable(bool newVal)
    {
        var rb = HandModelDoF.gameObject.GetComponent<Rigidbody>();

        rb.isKinematic = !newVal;
    }

    private void HandleMouseInput()
    {
        if (_is_tiltingDoF)
        {
           
            if (!Input.GetMouseButton(0))
            {
                DoFSliders[_tiltingDoFIndex].value = 0.5f;
                _is_tiltingDoF = false;
                return;
            }

            //UnityEngine.Debug.Log("The _tiltingDoFIndex is :" + _tiltingDoFIndex);
            //UnityEngine.Debug.Log("The _DoFTiltingValue is :" + _DoFTiltingValue);
            HandModelDoF.DoFTilts[_tiltingDoFIndex] = _DoFTiltingValue;
            HandModelDoF.UpdateBones(true);
            HandModelDoF.WristTilts[0] = 1;
            HandModelDoF.UpdateWrist();
            HandModelDoF.WristTilts[0] = -1;
            HandModelDoF.UpdateWrist();
        }

        if (_is_tiltingWrist)
        {
            if(!Input.GetMouseButton(0))
            {
                WristTransformSliders[_tiltingWristIndex].value = 0.5f;
                _is_tiltingWrist = false;
                return;
            }

            HandModelDoF.WristTilts[_tiltingWristIndex] = _wristTiltingValue;
            HandModelDoF.UpdateWrist();
        }
    }

    public void ClearContacts()
    {
        Planner.ClearContacts();
        Planner.ClearPreviousContactPointsOnScreen();
        Planner.VisualiseContactPoints();
    }

    public void OnResetHandBtnPress()
    {
        HandModelDoF.ResetTransform();
        //ClearContacts();
    }

    private void AttachDoFSlidersToTilts()
    {
        for(var i=0; i< DoFSliders.Length; i++)
        {
            var slider = DoFSliders[i];
            slider.onValueChanged.AddListener(delegate
            {
                // 0.5 : center of the slider, representing static
                _DoFTiltingValue = slider.value - 0.5f;
                _tiltingDoFIndex = Array.IndexOf(DoFSliders, slider);
                _is_tiltingDoF = true;
            });
        }
    }

    private void AttachWristTransformSlidersToTilts()
    {
        for(var i=0; i<WristTransformSliders.Length; i++)
        {
            var slider = WristTransformSliders[i];
            slider.onValueChanged.AddListener(delegate
            {
                _wristTiltingValue = slider.value - 0.5f;
                _tiltingWristIndex = Array.IndexOf(WristTransformSliders, slider);
                //if(_tiltingWristIndex < 3)
                //{
                //    _wristTiltingValue *= 0.2f; // slows position movement
                //}
                _is_tiltingWrist = true;
            });
        }
    }



    private GraspPlanner _planner
    {
        get
        {
            return SubjectModelImporter.GetPlanner();
        }
    }


    public void OnReturnBtnPress()
    {
        _planner.Is_manualControl = false;
        var rb = HandModelDoF.gameObject.GetComponent<Rigidbody>();
        rb.isKinematic = false;
        Planner.Is_AccumulatingContacts = false;

        _planner.ResetAll(true);
        _planner.AcceptedScore = double.NegativeInfinity;
        _planner.logger = null;
        PlannerSettings.ApplyLastSetting();

        var rb1 = SubjectModelImporter.gameObject.GetComponent<Rigidbody>();
        if (rb1 != null)
        {
            rb1.isKinematic = false;
        }
    }

    public void CalculateQuality()
    {
        _planner.Is_QualityUpdatedOnCollisionStay = true;

        //ToggleQualityAutoCalculationBtnText.text =
        //    _planner.Is_QualityUpdatedOnCollisionStay ? "Auto" : "Off";

    }

    static int MotionSimulateCount = 0;
    static int RunningCount = 0;
    public void MotionSimulator()
    {
        RunningCount = 0;
        for (int i = 0; i < 23; i++){
            Invoke("MotionSimulateFlag", 1);
            //MotionSimulateFlag();
            RunningCount++;
        }
        MotionSimulateCount = 0;
    }

    private void MotionSimulate()
    {   
        float DoFTiltingValue = -0.5f;
        if(RunningCount % 2 != 0)
        {
            DoFTiltingValue = -DoFTiltingValue;
        }
        for (int j = 0; j < 300; j++)
        {
            HandModelDoF.DoFTilts[MotionSimulateCount] = DoFTiltingValue;
            HandModelDoF.UpdateBones(true);
            HandModelDoF.WristTilts[0] = 1;
            HandModelDoF.UpdateWrist();
            HandModelDoF.WristTilts[0] = -1;
            HandModelDoF.UpdateWrist();
        }
        MotionSimulateCount++;
    }

    public void SavePosition()
    {
        HandModelDoF.SaveCurrentTransform();
        Planner.ContactPointFilter();
    }

    public void LastSavePosition()
    {
        HandModelDoF.LastSavedTransform();
    }

    bool _MoveControl = false;//方向控制
    bool _isMove = false;//运动开关
    int ClickCount = 0;//执行次数
    int Onri = 1;//方向
    int TiltingDoFIndex = 0;//DOF count


    public void IsMove()
    {
        Planner.SurfaceContactPoint();
        Planner.FingerFlag = 1;
        Planner.MotionSimulateFlag = !Planner.MotionSimulateFlag;
        if (!_isMove)
        {
            _isMove = true;
        }
        else
        {
            _isMove = false;
        }
        TiltingDoFIndex = 0;
    }

    private void IsAutoMove()//控制是否自动移动
    {
        if (_isMove) { 
            ClickCount++;
            if (_MoveControl)
            {
                Onri = -Onri;//调整到相反的方向
                _MoveControl = false;

                HandModelDoF.LastSavedTransform();

            }
            else
            {
                _MoveControl = true;
            }
            if (ClickCount == 4)
            {
                TiltingDoFIndex++;
                ClickCount = 0;
                ClearContacts();
                UnityEngine.Debug.Log("TiltingDoFIndex: " + TiltingDoFIndex);
            }
            switch (TiltingDoFIndex)
            {
                case 5:
                    Planner.SurfaceContactPoint(1);
                    break;
                case 9:
                    Planner.SurfaceContactPoint(2);
                    break;
                case 13:
                    Planner.SurfaceContactPoint(3);
                    break;
                case 18:
                    Planner.SurfaceContactPoint(4);
                    break;
                case 23:
                    Planner.SurfaceContactPoint(5);
                    TiltingDoFIndex = 0;
                    Planner.FingerFlag = 0;
                    //HandModelDoF.ResetTransform();
                    HandModelDoF.LastSavedTransform();
                    _isMove = false;
                    break;
                default:
                    break;
            }
            //if (TiltingDoFIndex == 23)
            //{
            //    TiltingDoFIndex = 0;
            //    //HandModelDoF.ResetTransform();
            //    HandModelDoF.LastSavedTransform();
            //    _isMove = false;
            //}
            //UnityEngine.Debug.Log("TiltingDoFIndex: " + TiltingDoFIndex);
            //UnityEngine.Debug.Log("ClickCount:" + ClickCount);
        }
    }
    private void AutoMove()//自动移动
    {
        if (_MoveControl && _isMove)
        {
            HandModelDoF.DoFTilts[TiltingDoFIndex] = 0.5f * Onri;
            HandModelDoF.UpdateBones(true);
            HandModelDoF.WristTilts[0] = 1;
            HandModelDoF.UpdateWrist();
            HandModelDoF.WristTilts[0] = -1;
            HandModelDoF.UpdateWrist();
        }
    }

    public void InitMove()
    {
        //int[] spNum = { 0, 5, 7, 8, 9, 11, 12, 14, 16, 17, 19, 21, 22 };

        //for (int i = 0; i < spNum.Length; i++)
        //{
        //    for (int j = 0; j < 120; j++)
        //    {
        //        HandModelDoF.DoFTilts[spNum[i]] = 0.4f;
        //        HandModelDoF.UpdateBones(true);
        //        HandModelDoF.WristTilts[0] = 1;
        //        HandModelDoF.UpdateWrist();
        //        HandModelDoF.WristTilts[0] = -1;
        //        HandModelDoF.UpdateWrist();
        //    }
        //}
        Type test_type = Planner.GetType();
        FieldInfo fieldInfo = test_type.GetField("_contacts", BindingFlags.NonPublic | BindingFlags.Instance);
        List<ContactPoint> _contacts = (List<ContactPoint>)fieldInfo.GetValue(Planner);
        fieldInfo = test_type.GetField("_contactPointsFilter", BindingFlags.NonPublic | BindingFlags.Instance);
        ContactPoint[] _contactPointsFilter = (ContactPoint[])fieldInfo.GetValue(Planner);
        int count = 0; 
        foreach (var contact in _contacts)
        {
            count++;
            Vector3 pos = contact.point;
            UnityEngine.Debug.Log("_contacts " + count + " = " + pos);
        }
        count = 0;
        foreach (var contact in _contactPointsFilter)
        {
            count++;
            Vector3 pos = contact.point;
            UnityEngine.Debug.Log("_contactPointsFilter " + count + " = " + pos);
        }
    }

    public void OnMakeContactBtnPress()
    {
        _planner.MakeContactOnClosestDefinedContact();
    }

    // when the return button is pressed
    public void OnReturn()
    {
        _planner.ResetAll(true);
        _planner.AcceptedScore = double.NegativeInfinity;
        _planner.logger = null;
        PlannerSettings.ApplyLastSetting();

        var rb = SubjectModelImporter.gameObject.GetComponent<Rigidbody>();
        if (rb != null)
        {
            rb.isKinematic = false;
        }
    }

    // update score
    private void UpdateScorePanelOnStepApplied()
    {
        var quality = _planner.AcceptedScore;
        //print(_planner.AcceptedScore);

        // reduced intensity colors
        Color decreased = new Color(165f / 255, 45f / 255, 45f / 255, 1);
        Color increased = new Color(53f / 255, 148f / 255, 117f / 255, 1);

        var lastQualityStr = QualityValue.text;
        QualityValue.text = quality.ToString();
        // change text color according to delta (positive is green negative is red)
        if (_lastQualityValue.HasValue)
        {
            double delta = quality - _lastQualityValue.Value;
            QualityValue.color = delta > 0 ? increased : decreased;
        }
        else
        {
            QualityValue.color = Color.black;
        }
        _lastQualityValue = quality;

    }

    private void UpdateScorePanelEachFrame()
    {
        var nextQuality = _planner.NextScore;
        var temperature = _planner.Temperature;
        var contactPoints = _planner.AccpetedContactCount;
        var iterations = _planner.Iterations;

        NextQualityValue.text = nextQuality.ToString();
        TemperatureValue.text = temperature.ToString();
        ContactPointsValue.text = contactPoints.ToString();
        IterationsValue.text = iterations.ToString();

    }

    // toggle planner state (running / paused)
    public void TooglePlanner()
    {
        _planner.TogglePlanner();
        UpdateToogleButtonText();
    }


    private void StepAcceptedEventHandler(object source, EventArgs args)
    {
        UpdateToogleButtonText();
        UpdateScorePanelOnStepApplied();
    }

    // Display the text (pause / continue) of the toogle button according to the state of the planner 
    private void UpdateToogleButtonText()
    {
        ToggleBtn.GetComponentInChildren<Text>().text = _planner.Is_planning ? "pause" : "continue";
    }

    public void SetSingleStep(bool newValue)
    {
        _planner.SetSingleStep(newValue);
    }

    public void ToggleContactPointIndicators(bool newVal)
    {
        _planner.SetContactIndicatorActive(newVal);

    }

    public void ToggleDirecionOfInterestIndicaators(bool newVal)
    {
        if (newVal)
        {
            QualityMeasureUI.VisualizeForceDirections();
        }
        else
        {
            QualityMeasureUI.ClearForceDirectionIndicators();
        }
    }


    private void UpdateContactPointIndicatorsVisibility()
    {
        var is_enabled = _planner.Is_contactPointsVisualized;

        if (_planner.Is_selectedContact)
        {
            ImaginaryContactPointVisualizeToggle.isOn = is_enabled;
        }
        else
        {
            ContactPointVisualizeToggle.isOn = is_enabled;
        }


    }

    private void UpdateSingleStepToggleLabel()
    {
        SingleStepToggle.isOn = _planner.Is_singleStep;
    }



}
